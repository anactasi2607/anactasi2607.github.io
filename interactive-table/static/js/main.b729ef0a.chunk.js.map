{"version":3,"sources":["Loader/Loader.js","Table/Table.js","Form/Form.js","DetailInfo/DetailInfo.js","DataSelector/DataSelector.js","TableSearch/TableSearch.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","Table","props","onClick","onSort","bind","title","sortField","sort","data","map","item","key","id","phone","onClickRow","firstName","lastName","email","Form","this","submitHandler","onChangeInput","newUser","onClickClose","onSubmit","htmlFor","type","name","placeholder","onChange","value","required","Component","DetailInfo","user","address","streetAddress","city","state","zip","defaultValue","description","DataSelector","onSelect","TableSearch","useState","setValue","event","target","onSearch","App","isLoading","selectedRow","isDataSelected","currentPage","displayForm","search","evt","setState","preventDefault","console","log","row","cloneData","concat","sortType","orderedData","_","orderBy","dataSelectHandler","url","fetchData","pageChangeHandler","selected","searchHandler","fetch","response","json","filter","toLowerCase","includes","filteredData","getFilteredData","pageCount","Math","ceil","length","displayData","chunk","Fragment","previousLabel","nextLabel","breakLabel","breakClassName","breakLinkClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","disabledClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b729ef0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"loader__spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      <p>Ожидаем загрузку данных...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table(props) {\r\n  return (\r\n    <table className=\"main__table table\">\r\n      <thead className=\"table__thead\">\r\n        <tr className=\"table__tr\">\r\n          <th\r\n            className=\"table__th\"\r\n            onClick={props.onSort.bind(null, \"id\")}\r\n            title=\"Нажмите для сортировки\"\r\n          >\r\n            ID{\" \"}\r\n            {props.sortField === \"id\" ? (\r\n              <span className={props.sort}></span>\r\n            ) : null}\r\n          </th>\r\n          <th\r\n            className=\"table__th\"\r\n            onClick={props.onSort.bind(null, \"firstName\")}\r\n            title=\"Нажмите для сортировки\"\r\n          >\r\n            First Name\r\n            {props.sortField === \"firstName\" ? (\r\n              <span className={props.sort}></span>\r\n            ) : null}\r\n          </th>\r\n          <th\r\n            className=\"table__th\"\r\n            onClick={props.onSort.bind(null, \"lastName\")}\r\n            title=\"Нажмите для сортировки\"\r\n          >\r\n            Last Name\r\n            {props.sortField === \"lastName\" ? (\r\n              <span className={props.sort}></span>\r\n            ) : null}\r\n          </th>\r\n          <th\r\n            className=\"table__th\"\r\n            onClick={props.onSort.bind(null, \"email\")}\r\n            title=\"Нажмите для сортировки\"\r\n          >\r\n            E-mail\r\n            {props.sortField === \"email\" ? (\r\n              <span className={props.sort}></span>\r\n            ) : null}\r\n          </th>\r\n          <th\r\n            className=\"table__th\"\r\n            onClick={props.onSort.bind(null, \"phone\")}\r\n            title=\"Нажмите для сортировки\"\r\n          >\r\n            Phone\r\n            {props.sortField === \"phone\" ? (\r\n              <span className={props.sort}></span>\r\n            ) : null}\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"table__tbody\">\r\n        {props.data.map((item) => (\r\n          <tr\r\n            className=\"table__tr\"\r\n            key={item.id + item.phone}\r\n            onClick={props.onClickRow.bind(null, item)}\r\n            title=\"Нажмите для получения подробной информации\"\r\n          >\r\n            <td className=\"table__td\">{item.id}</td>\r\n            <td className=\"table__td\">{item.firstName}</td>\r\n            <td className=\"table__td\">{item.lastName}</td>\r\n            <td className=\"table__td\">{item.email}</td>\r\n            <td className=\"table__td\">{item.phone}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport \"./Form.css\";\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    const { submitHandler, onChangeInput, newUser, onClickClose } = this.props;\r\n    return (\r\n      <form className=\"header__add-form add-form\" onSubmit={submitHandler}>\r\n        <button\r\n          className=\"header__button-close\"\r\n          onClick={onClickClose}\r\n          title=\"Закрыть\"\r\n        >\r\n          X\r\n        </button>\r\n        <h2 className=\"add-form__title\">\r\n          Добавить нового пользователя в таблицу:\r\n        </h2>\r\n        <div className=\"add-form__row\">\r\n          <label className=\"add-form__label\" htmlFor=\"user-id\">\r\n            id:\r\n          </label>\r\n          <input\r\n            className=\"add-form__input\"\r\n            id=\"id\"\r\n            type=\"number\"\r\n            name=\"user-id\"\r\n            placeholder=\"id\"\r\n            onChange={onChangeInput}\r\n            value={newUser.id}\r\n            required\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"add-form__row\">\r\n          <label className=\"add-form__label\" htmlFor=\"firstName\">\r\n            firstName:\r\n          </label>\r\n          <input\r\n            className=\"add-form__input\"\r\n            id=\"firstName\"\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            placeholder=\"firstName\"\r\n            onChange={onChangeInput}\r\n            value={newUser.firstName}\r\n            required\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"add-form__row\">\r\n          <label className=\"add-form__label\" htmlFor=\"lastName\">\r\n            lastName:\r\n          </label>\r\n          <input\r\n            className=\"add-form__input\"\r\n            id=\"lastName\"\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            placeholder=\"lastName\"\r\n            onChange={onChangeInput}\r\n            value={newUser.lastName}\r\n            required\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"add-form__row\">\r\n          <label className=\"add-form__label\" htmlFor=\"email\">\r\n            email:\r\n          </label>\r\n          <input\r\n            className=\"add-form__input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n            onChange={onChangeInput}\r\n            value={newUser.email}\r\n            required\r\n          ></input>\r\n        </div>\r\n\r\n        <div className=\"add-form__row\">\r\n          <label className=\"add-form__label\" htmlFor=\"phone\">\r\n            phone:\r\n          </label>\r\n          <input\r\n            className=\"add-form__input\"\r\n            id=\"phone\"\r\n            type=\"number\"\r\n            name=\"phone\"\r\n            placeholder=\"phone\"\r\n            onChange={onChangeInput}\r\n            value={newUser.phone}\r\n            required\r\n          ></input>\r\n        </div>\r\n        <button className=\"add-form__button\">Добавить в таблицу</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./DetailInfo.css\";\r\n\r\nfunction DetailInfo({ user, onClickClose }) {\r\n  return (\r\n    <div className=\"main__info info\">\r\n      <h3 className=\"info__title\">Подробная информация</h3>\r\n      <button className=\"info__button\" onClick={onClickClose} title=\"Закрыть\">\r\n        X\r\n      </button>\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Выбран пользователь:</p>{\" \"}\r\n        <span>{user.firstName + \" \" + user.lastName}</span>\r\n      </div>\r\n\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Адрес проживания:</p>\r\n        <span>{user.address.streetAddress}</span>\r\n      </div>\r\n\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Город:</p> <span>{user.address.city}</span>\r\n      </div>\r\n\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Провинция/штат:</p>{\" \"}\r\n        <span>{user.address.state}</span>\r\n      </div>\r\n\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Индекс:</p> <span>{user.address.zip}</span>\r\n      </div>\r\n      <div className=\"info__row\">\r\n        <p className=\"info__p\">Описание:</p>\r\n        <textarea className=\"info__text\" defaultValue={user.description} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetailInfo;\r\n","import React from \"react\";\r\nimport \"./DataSelector.css\";\r\n\r\nfunction DataSelector(props) {\r\n  const smallData = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n  const bigData = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\r\n  return (\r\n    <div className=\"dataSelector\">\r\n      <button\r\n        onClick={() => props.onSelect(smallData)}\r\n        className=\"dataSelector__button dataSelector__button--small\"\r\n      >\r\n        32 элемента\r\n      </button>\r\n      <button\r\n        onClick={() => props.onSelect(bigData)}\r\n        className=\"dataSelector__button dataSelector__button--big\"\r\n      >\r\n        1000 элементов\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataSelector;\r\n","import React, { useState } from \"react\";\r\nimport \"./TableSearch.css\";\r\n\r\nfunction TableSearch(props) {\r\n  const [value, setValue] = useState(\"\");\r\n  const valueChangeHandler = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header__search search\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"search__input\"\r\n        onChange={valueChangeHandler}\r\n        value={value}\r\n      />\r\n      <button className=\"search__button\" onClick={() => props.onSearch(value)}>\r\n        Найти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableSearch;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Loader from \"./Loader/Loader.js\";\nimport Table from \"./Table/Table.js\";\nimport Form from \"./Form/Form.js\";\nimport DetailInfo from \"./DetailInfo/DetailInfo.js\";\nimport _ from \"lodash\";\nimport DataSelector from \"./DataSelector/DataSelector.js\";\nimport ReactPaginate from \"react-paginate\";\nimport \"./ReactPaginate/ReactPaginate.css\";\nimport TableSearch from \"./TableSearch/TableSearch\";\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    data: [],\n    sort: \"asc\",\n    sortField: \"\",\n    newUser: {\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n    },\n    selectedRow: null,\n    isDataSelected: false,\n    currentPage: 0,\n    displayForm: false,\n    search: \"\",\n  };\n\n  async fetchData(url) {\n    const response = await fetch(url);\n\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data,\n    });\n  }\n\n  onChangeInput = (evt) => {\n    this.setState({\n      newUser: {\n        ...this.state.newUser,\n        [evt.target.id]: evt.target.value,\n      },\n    });\n  };\n\n  submitHandler = (evt) => {\n    evt.preventDefault();\n    const { newUser, data } = this.state;\n    console.log(this.state.newUser);\n\n    this.setState({\n      data: [newUser, ...data],\n      newUser: {\n        id: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\",\n      },\n    });\n  };\n\n  onClickRow = (row) => {\n    this.setState({\n      selectedRow: row,\n    });\n  };\n\n  onClickClose = () => {\n    this.setState({\n      selectedRow: null,\n    });\n  };\n\n  onSort = (sortField) => {\n    const cloneData = this.state.data.concat();\n    const sortType = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n    const orderedData = _.orderBy(cloneData, sortField, sortType);\n    this.setState({\n      data: orderedData,\n      sort: sortType,\n      sortField,\n    });\n  };\n\n  dataSelectHandler = (url) => {\n    this.setState({\n      isDataSelected: true,\n      isLoading: true,\n    });\n    this.fetchData(url);\n  };\n\n  pageChangeHandler = ({ selected }) => {\n    this.setState({ currentPage: selected });\n  };\n\n  onClick = () => {\n    this.setState({ displayForm: !this.state.displayForm });\n  };\n\n  searchHandler = (search) => {\n    this.setState({ search, currentPage: 0 });\n  };\n\n  getFilteredData() {\n    const { data, search } = this.state;\n\n    if (!search) {\n      return data;\n    }\n\n    return data.filter((item) => {\n      return (\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"email\"].toLowerCase().includes(search.toLowerCase())\n      );\n    });\n  }\n\n  render() {\n    const pageSize = 50;\n    const filteredData = this.getFilteredData(this.state.data);\n    const pageCount = Math.ceil(filteredData.length / pageSize);\n    const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage];\n    if (!this.state.isDataSelected) {\n      return (\n        <div className=\"container\">\n          <DataSelector onSelect={this.dataSelectHandler} />\n        </div>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {this.state.isLoading ? (\n          <Loader />\n        ) : (\n          <React.Fragment>\n            <header className=\"header container\">\n              <h1 className=\"header__title\">Интерактивная таблица</h1>\n              <div className=\"header__content\">\n                <TableSearch onSearch={this.searchHandler} />\n                <button className=\"header__addButton\" onClick={this.onClick}>\n                  Добавить\n                </button>\n              </div>\n              {this.state.displayForm ? (\n                <Form\n                  submitHandler={this.submitHandler}\n                  onChangeInput={this.onChangeInput}\n                  newUser={this.state.newUser}\n                  onClickClose={this.onClick}\n                />\n              ) : null}\n            </header>\n\n            <main className=\"main container\">\n              <Table\n                data={displayData}\n                onClickRow={this.onClickRow}\n                onSort={this.onSort}\n                sort={this.state.sort}\n                sortField={this.state.sortField}\n              />\n\n              {this.state.data.length > pageSize ? (\n                <ReactPaginate\n                  previousLabel={\"<\"}\n                  nextLabel={\">\"}\n                  breakLabel={\"...\"}\n                  breakClassName={\"pagination__item--break\"}\n                  breakLinkClassName={\"pagination__link--break\"}\n                  pageCount={pageCount}\n                  marginPagesDisplayed={2}\n                  pageRangeDisplayed={5}\n                  onPageChange={this.pageChangeHandler}\n                  containerClassName={\"main__pagination pagination\"}\n                  activeClassName={\"pagination__item--active\"}\n                  disabledClassName={\"pagination__item--disabled\"}\n                  pageClassName=\"pagination__item\"\n                  pageLinkClassName=\"pagination__link\"\n                  previousClassName=\"pagination__item\"\n                  nextClassName=\"pagination__item\"\n                  previousLinkClassName=\"pagination__link\"\n                  nextLinkClassName=\"pagination__link\"\n                  forcePage={this.state.currentPage}\n                />\n              ) : null}\n\n              {this.state.selectedRow ? (\n                <DetailInfo\n                  user={this.state.selectedRow}\n                  onClickClose={this.onClickClose}\n                />\n              ) : null}\n            </main>\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}